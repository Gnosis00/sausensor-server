// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.sau.sausensor.server.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;

privileged aspect NodeHealthL_Roo_Jpa_ActiveRecord {

    @PersistenceContext
    transient EntityManager NodeHealthL.entityManager;

    public static final EntityManager NodeHealthL.entityManager() {
        EntityManager em = new NodeHealthL().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long NodeHealthL.countNodeHealthLs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM NodeHealthL o", Long.class).getSingleResult();
    }

    public static List<NodeHealthL> NodeHealthL.findAllNodeHealthLs() {
        return entityManager().createQuery("SELECT o FROM NodeHealthL o", NodeHealthL.class).getResultList();
    }

    public static NodeHealthL NodeHealthL.findNodeHealthL(Integer id) {
        if (id == null) return null;
        return entityManager().find(NodeHealthL.class, id);
    }

    public static List<NodeHealthL> NodeHealthL.findNodeHealthLEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM NodeHealthL o", NodeHealthL.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    @Transactional
    public void NodeHealthL.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void NodeHealthL.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            NodeHealthL attached = NodeHealthL.findNodeHealthL(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void NodeHealthL.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void NodeHealthL.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public NodeHealthL NodeHealthL.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        NodeHealthL merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

}
