// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.sau.sausensor.server.controller;

import edu.sau.sausensor.server.domain.NodeHealth;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.UnsupportedEncodingException;

privileged aspect NodeHealthController_Roo_Controller {

    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String NodeHealthController.create(@Valid NodeHealth nodeHealth, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, nodeHealth);
            return "nodehealths/create";
        }
        uiModel.asMap().clear();
        nodeHealth.persist();
        return "redirect:/nodehealths/" + encodeUrlPathSegment(nodeHealth.getId().toString(), httpServletRequest);
    }

    @RequestMapping(params = "form", produces = "text/html")
    public String NodeHealthController.createForm(Model uiModel) {
        populateEditForm(uiModel, new NodeHealth());
        return "nodehealths/create";
    }

    @RequestMapping(value = "/{id}", produces = "text/html")
    public String NodeHealthController.show(@PathVariable("id") Integer id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("nodehealth", NodeHealth.findNodeHealth(id));
        uiModel.addAttribute("itemId", id);
        return "nodehealths/show";
    }

    @RequestMapping(produces = "text/html")
    public String NodeHealthController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("nodehealths", NodeHealth.findNodeHealthEntries(firstResult, sizeNo));
            float nrOfPages = (float) NodeHealth.countNodeHealths() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("nodehealths", NodeHealth.findAllNodeHealths());
        }
        addDateTimeFormatPatterns(uiModel);
        return "nodehealths/list";
    }

    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String NodeHealthController.update(@Valid NodeHealth nodeHealth, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, nodeHealth);
            return "nodehealths/update";
        }
        uiModel.asMap().clear();
        nodeHealth.merge();
        return "redirect:/nodehealths/" + encodeUrlPathSegment(nodeHealth.getId().toString(), httpServletRequest);
    }

    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String NodeHealthController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, NodeHealth.findNodeHealth(id));
        return "nodehealths/update";
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String NodeHealthController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        NodeHealth nodeHealth = NodeHealth.findNodeHealth(id);
        nodeHealth.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/nodehealths";
    }

    void NodeHealthController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("nodeHealth_resulttime_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }

    void NodeHealthController.populateEditForm(Model uiModel, NodeHealth nodeHealth) {
        uiModel.addAttribute("nodeHealth", nodeHealth);
        addDateTimeFormatPatterns(uiModel);
    }

    String NodeHealthController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {
        }
        return pathSegment;
    }

}
