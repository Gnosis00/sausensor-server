// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.sau.sausensor.server.controller;

import edu.sau.sausensor.server.domain.Area;
import edu.sau.sausensor.server.domain.Mts400ResultsL;
import edu.sau.sausensor.server.domain.Person;
import edu.sau.sausensor.server.domain.Sensor;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;

privileged aspect SensorController_Roo_Controller {

    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String SensorController.create(@Valid Sensor sensor, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, sensor);
            return "sensors/create";
        }
        uiModel.asMap().clear();
        sensor.persist();
        return "redirect:/sensors/" + encodeUrlPathSegment(sensor.getId().toString(), httpServletRequest);
    }

    @RequestMapping(params = "form", produces = "text/html")
    public String SensorController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Sensor());
        return "sensors/create";
    }

    @RequestMapping(value = "/{id}", produces = "text/html")
    public String SensorController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("sensor", Sensor.findSensor(id));
        uiModel.addAttribute("itemId", id);
        return "sensors/show";
    }

    @RequestMapping(produces = "text/html")
    public String SensorController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("sensors", Sensor.findSensorEntries(firstResult, sizeNo));
            float nrOfPages = (float) Sensor.countSensors() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("sensors", Sensor.findAllSensors());
        }
        return "sensors/list";
    }

    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SensorController.update(@Valid Sensor sensor, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, sensor);
            return "sensors/update";
        }
        uiModel.asMap().clear();
        sensor.merge();
        return "redirect:/sensors/" + encodeUrlPathSegment(sensor.getId().toString(), httpServletRequest);
    }

    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String SensorController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Sensor.findSensor(id));
        return "sensors/update";
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String SensorController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Sensor sensor = Sensor.findSensor(id);
        sensor.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/sensors";
    }

    void SensorController.populateEditForm(Model uiModel, Sensor sensor) {
        uiModel.addAttribute("sensor", sensor);
        uiModel.addAttribute("areas", Arrays.asList(Area.values()));
        uiModel.addAttribute("mts400resultsls", Mts400ResultsL.findAllMts400ResultsLs());
        uiModel.addAttribute("people", Person.findAllPeople());
    }

    String SensorController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {
        }
        return pathSegment;
    }

}
