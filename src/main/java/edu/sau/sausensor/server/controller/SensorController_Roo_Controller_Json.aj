// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.sau.sausensor.server.controller;

import edu.sau.sausensor.server.domain.Area;
import edu.sau.sausensor.server.domain.Mts400ResultsL;
import edu.sau.sausensor.server.domain.Person;
import edu.sau.sausensor.server.domain.Sensor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

privileged aspect SensorController_Roo_Controller_Json {

    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SensorController.showJson(@PathVariable("id") Long id) {
        Sensor sensor = Sensor.findSensor(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (sensor == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(sensor.toJson(), headers, HttpStatus.OK);
    }

    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SensorController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Sensor> result = Sensor.findAllSensors();
        return new ResponseEntity<String>(Sensor.toJsonArray(result), headers, HttpStatus.OK);
    }

    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SensorController.createFromJson(@RequestBody String json) {
        Sensor sensor = Sensor.fromJsonToSensor(json);
        sensor.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }

    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SensorController.createFromJsonArray(@RequestBody String json) {
        for (Sensor sensor : Sensor.fromJsonArrayToSensors(json)) {
            sensor.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SensorController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Sensor sensor = Sensor.fromJsonToSensor(json);
        if (sensor.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> SensorController.deleteFromJson(@PathVariable("id") Long id) {
        Sensor sensor = Sensor.findSensor(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (sensor == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        sensor.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }

    @RequestMapping(params = "find=ByArea", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SensorController.jsonFindSensorsByArea(@RequestParam("area") Area area) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Sensor.toJsonArray(Sensor.findSensorsByArea(area).getResultList()), headers, HttpStatus.OK);
    }

    @RequestMapping(params = "find=ByNodeid", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SensorController.jsonFindSensorsByNodeid(@RequestParam("nodeid") Mts400ResultsL nodeid) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Sensor.toJsonArray(Sensor.findSensorsByNodeid(nodeid).getResultList()), headers, HttpStatus.OK);
    }

    @RequestMapping(params = "find=ByPerson", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SensorController.jsonFindSensorsByPerson(@RequestParam("person") Person person) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Sensor.toJsonArray(Sensor.findSensorsByPerson(person).getResultList()), headers, HttpStatus.OK);
    }

}
